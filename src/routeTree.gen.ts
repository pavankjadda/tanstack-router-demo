/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BookIndexRouteImport } from './routes/book/index'

const ProfileLazyRouteImport = createFileRoute('/profile')()
const LogoutLazyRouteImport = createFileRoute('/logout')()
const LoginLazyRouteImport = createFileRoute('/login')()
const HelpLazyRouteImport = createFileRoute('/help')()
const FaqLazyRouteImport = createFileRoute('/faq')()
const BookFindLazyRouteImport = createFileRoute('/book/find')()
const BookAllLazyRouteImport = createFileRoute('/book/all')()
const BookIdLazyRouteImport = createFileRoute('/book/$id')()

const ProfileLazyRoute = ProfileLazyRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))
const LogoutLazyRoute = LogoutLazyRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))
const LoginLazyRoute = LoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))
const HelpLazyRoute = HelpLazyRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/help.lazy').then((d) => d.Route))
const FaqLazyRoute = FaqLazyRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/faq.lazy').then((d) => d.Route))
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookIndexRoute = BookIndexRouteImport.update({
  id: '/book/',
  path: '/book/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookFindLazyRoute = BookFindLazyRouteImport.update({
  id: '/book/find',
  path: '/book/find',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/book/find.lazy').then((d) => d.Route))
const BookAllLazyRoute = BookAllLazyRouteImport.update({
  id: '/book/all',
  path: '/book/all',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/book/all.lazy').then((d) => d.Route))
const BookIdLazyRoute = BookIdLazyRouteImport.update({
  id: '/book/$id',
  path: '/book/$id',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/book/$id.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/faq': typeof FaqLazyRoute
  '/help': typeof HelpLazyRoute
  '/login': typeof LoginLazyRoute
  '/logout': typeof LogoutLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/book/$id': typeof BookIdLazyRoute
  '/book/all': typeof BookAllLazyRoute
  '/book/find': typeof BookFindLazyRoute
  '/book': typeof BookIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/faq': typeof FaqLazyRoute
  '/help': typeof HelpLazyRoute
  '/login': typeof LoginLazyRoute
  '/logout': typeof LogoutLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/book/$id': typeof BookIdLazyRoute
  '/book/all': typeof BookAllLazyRoute
  '/book/find': typeof BookFindLazyRoute
  '/book': typeof BookIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/faq': typeof FaqLazyRoute
  '/help': typeof HelpLazyRoute
  '/login': typeof LoginLazyRoute
  '/logout': typeof LogoutLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/book/$id': typeof BookIdLazyRoute
  '/book/all': typeof BookAllLazyRoute
  '/book/find': typeof BookFindLazyRoute
  '/book/': typeof BookIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/faq'
    | '/help'
    | '/login'
    | '/logout'
    | '/profile'
    | '/book/$id'
    | '/book/all'
    | '/book/find'
    | '/book'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/faq'
    | '/help'
    | '/login'
    | '/logout'
    | '/profile'
    | '/book/$id'
    | '/book/all'
    | '/book/find'
    | '/book'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/faq'
    | '/help'
    | '/login'
    | '/logout'
    | '/profile'
    | '/book/$id'
    | '/book/all'
    | '/book/find'
    | '/book/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  FaqLazyRoute: typeof FaqLazyRoute
  HelpLazyRoute: typeof HelpLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  LogoutLazyRoute: typeof LogoutLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  BookIdLazyRoute: typeof BookIdLazyRoute
  BookAllLazyRoute: typeof BookAllLazyRoute
  BookFindLazyRoute: typeof BookFindLazyRoute
  BookIndexRoute: typeof BookIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/': {
      id: '/book/'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof BookIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/find': {
      id: '/book/find'
      path: '/book/find'
      fullPath: '/book/find'
      preLoaderRoute: typeof BookFindLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/all': {
      id: '/book/all'
      path: '/book/all'
      fullPath: '/book/all'
      preLoaderRoute: typeof BookAllLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$id': {
      id: '/book/$id'
      path: '/book/$id'
      fullPath: '/book/$id'
      preLoaderRoute: typeof BookIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  FaqLazyRoute: FaqLazyRoute,
  HelpLazyRoute: HelpLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  LogoutLazyRoute: LogoutLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  BookIdLazyRoute: BookIdLazyRoute,
  BookAllLazyRoute: BookAllLazyRoute,
  BookFindLazyRoute: BookFindLazyRoute,
  BookIndexRoute: BookIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
